input { pipeline { address => edx } }

filter {
    grok {
      match => { "message" => "%{CISCOTIMESTAMP:[@metadata][timestamp]} %{GREEDYDATA:[labels][os]} \[service_variant=%{WORD:[labels][service_variant]}\]\[%{GREEDYDATA:[labels][task]}\]\[env:%{GREEDYDATA:[labels][env]}\] %{LOGLEVEL:[labels][level]} \[%{GREEDYDATA} %{GREEDYDATA}\] \[%{GREEDYDATA:[labels][file_name]}\:%{NUMBER:[labels][file_line]}\] - %{GREEDYDATA:new_message}"}
      # overwrite => [ "message" ]
    }

    mutate {
      add_field  => {"[event][dataset]" => "edx"}
    }

    mutate {
      rename => {"@timestamp" => "[event][created]"}
    }

    # example "May 20 10:17:06"
    date {
      match => [ "[@metadata][timestamp]", "MMM dd HH:mm:ss" ]
    }

    mutate {
      rename => {"message" => "[event][original]"}
    }

    mutate {
      rename => {"new_message" => "message"}
    }

    if [labels][task] == "elasticsearch" {
      grok {
        match => { "message" => "%{WORD:[http][request][method]} %{GREEDYDATA:[http][request][url]} \[status\:%{NUMBER:[http][response][status_code]:int} request\:%{NUMBER:[http][request][time]:float}s\]"}
      }
    }

    if [labels][task] == "root" {
      grok {
        match => { "message" => "certificate generated for user: %{USERNAME:[certificate_generate][user_name]} with generate_pdf status: %{WORD:[certificate_generate][generate_pdf]}"}
      }
    }

    if [labels][task] == "audit" {
      grok {
        match => { "message" => "%{GREEDYDATA:[audit][event]} - (user.id: )?%{USERNAME:[audit][user_id]}"}
      }

      if "Login" in [audit][event] and "creation" not in [audit][event]{
        mutate { replace => { "[audit][event]" => "login" } }
      }
      else if "Login" in [audit][event] and "creation" in [audit][event] {
        mutate { replace => { "[audit][event]" => "create_user" } }
        mutate { rename => { "[audit][user_id]" => "[audit][user_name]" } }
      }
      else if "Logout" in [audit][event]{
        mutate { replace => { "[audit][event]" => "logout" } }
      }
    }

    if [labels][task] == "openedx.core.djangoapps.content.block_structure.store" {
      grok {
        match => { "message" => "BlockStructure: %{DATA:[block_structure][event]}; <%{DATA}(>,|>\.)(\s+size\: %{NUMBER:[block_structure][size]:int})?"}
      }
    }

    if [labels][task] == "celery_utils.logged_task" {
      # Get all data that contain in {...} 
      grok {
        match => { "message" => "(?<[@metadata][object]>\{.*\})"}
      }
      
      # Map Python Dict to JSON 
      mutate { gsub => [ "[@metadata][object]", "u'", '"' ] } # u'string'
      mutate { gsub => [ "[@metadata][object]", "'", '"' ] }
      mutate { gsub => [ "[@metadata][object]", "L,", ',' ] } # fix {"user_id": 123456L, user_id": 987654L} etc.
      mutate { gsub => [ "[@metadata][object]", "L}", '}' ] }
      mutate { gsub => [ "[@metadata][object]", "None", 'null' ] }
      mutate { gsub => [ "[@metadata][object]", "False", 'false' ] }
      mutate { gsub => [ "[@metadata][object]", "True", 'true' ] }
      
      json {
        source => "[@metadata][object]"
        target => "recalculate_grade"
      }
    }

    if [labels][task] == "lms.djangoapps.grades.course_grade_factory" {

      # mutate { gsub => [ "message", "None", 'null' ] }
      # mutate { gsub => [ "message", "False", 'false' ] }
      # mutate { gsub => [ "message", "True", 'true' ] }

      mutate { gsub => [ "message", "Course: course_key", 'course_key' ] }
      mutate { gsub => [ "message", "Course Grade: percent", 'percent' ] }

      kv {
        whitespace => strict
        # recursive => "true"
        value_split_pattern => ": "
        field_split_pattern => ", "
        target => "course_grade"
      }
    }

    mutate {
      replace => {"message" => "[%{[labels][task]}] - %{message}"}
    }
}

output {
  if [labels][task] {
    elasticsearch {
      hosts => ["http://192.168.99.101:9200", "http://192.168.99.102:9200"]
      manage_template => false
      index => "edx-%{+YYYY.MM}"
      user => "elastic"
      password => "changeme"
      ecs_compatibility => disabled
    }
  }
}